"""
PDF Report Generator Module for APT Toolkit

Features:
- Professional PDF report generation
- Customizable templates  
- Vulnerability visualization
- Charts and graphs
- Thread-safe operation
"""

from typing import Dict, List, Optional, Any
from pathlib import Path
import threading
import time
from datetime import datetime
from enum import Enum, auto
from concurrent.futures import ThreadPoolExecutor

from fpdf import FPDF
from fpdf import XPos, YPos
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

from src.core.engine import ScanModule, ScanTarget, ScanResult, ScanStatus
from src.utils.logger import get_logger
from src.utils.file_utils import FileUtils
from src.utils.config import config
from src.core.event_system import event_system, Event
from src.templates import vulnerability_card, report_base

logger = get_logger(__name__)

class ReportSection(Enum):
    """Report sections"""
    COVER = auto()
    EXECUTIVE = auto()
    METHODOLOGY = auto() 
    FINDINGS = auto()
    DETAILS = auto()
    APPENDIX = auto()

class PDFGenerator(ScanModule):
    """Professional PDF report generator"""
    
    def __init__(self):
        super().__init__()
        self.module_name = "pdf_generator" 
        self.reports_dir = Path(config.reporting.pdf_dir)
        self.template_dir = Path(config.reporting.template_dir)
        self.max_threads = config.reporting.max_threads
        self._stop_event = threading.Event()
        
        # Setup directories
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        
    def initialize(self) -> None:
        """Initialize generator resources"""
        logger.info(f"Initialized {self.module_name} with {self.max_threads} threads")
        
    def cleanup(self) -> None:
        """Cleanup generator resources"""
        self._stop_event.set()
        logger.info(f"Cleaned up {self.module_name}")
        
    def validate_target(self, target: ScanTarget) -> bool:
        """Validate target data is appropriate for reporting"""
        return bool(target.metadata.get("results"))
        
    def _generate_cover_page(self, pdf: FPDF, metadata: Dict[str, Any]) -> None:
        """Generate report cover page"""
        pdf.add_page()
        pdf.set_font('helvetica', 'B', 24)
        pdf.cell(0, 40, 'Penetration Test Report', new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        pdf.ln(20)
        
        pdf.set_font('helvetica', '', 16)
        pdf.cell(0, 10, f"Client: {metadata.get('client', 'N/A')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 10, f"Date: {datetime.now().strftime('%Y-%m-%d')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 10, f"Generated by: APT Toolkit", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        
        if metadata.get('logo'):
            try:
                pdf.image(metadata['logo'], x=80, y=pdf.y + 10, w=50)
            except Exception:
                logger.warning("Failed to add logo to cover page")
                
        pdf.ln(30)
        pdf.set_font('helvetica', 'I', 12)
        pdf.cell(0, 10, "CONFIDENTIAL", align='C')
        
    def _generate_executive_summary(self, pdf: FPDF, findings: Dict[str, int]) -> None:
        """Generate executive summary section"""
        pdf.add_page()
        pdf.set_font('helvetica', 'B', 18)
        pdf.cell(0, 10, "Executive Summary", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.ln(10)
        
        # Generate findings pie chart
        chart_path = self._generate_findings_chart(findings)
        if chart_path:
            pdf.image(str(chart_path), x=50, w=100)
            chart_path.unlink()
            
        pdf.ln(60)
        pdf.set_font('helvetica', '', 12)
        pdf.multi_cell(0, 8, "This report outlines the security vulnerabilities identified during the penetration test..."
                    "Critical vulnerabilities should be addressed immediately...")
                    
    def _generate_findings_chart(self, findings: Dict[str, int]) -> Optional[Path]:
        """Generate findings visualization chart"""
        try:
            fig, ax = plt.subplots(figsize=(6, 3))
            ax.pie(
                findings.values(),
                labels=findings.keys(),
                autopct='%1.1f%%',
                startangle=90
            )
            ax.axis('equal')  
            
            chart_path = Path("/tmp/findings_chart.png")
            plt.savefig(chart_path, bbox_inches='tight', dpi=100)
            plt.close()
            return chart_path
            
        except Exception as e:
            logger.error(f"Failed to generate findings chart: {str(e)}")
            return None
            
    def _generate_vulnerability_details(self, pdf: FPDF, vulnerabilities: List[Dict[str, Any]]) -> None:
        """Generate vulnerability details section"""
        pdf.add_page()
        pdf.set_font('helvetica', 'B', 18)
        pdf.cell(0, 10, "Vulnerability Details", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.ln(10)
        
        pdf.set_font('helvetica', '', 12)
        for idx, vuln in enumerate(vulnerabilities, 1):
            pdf.multi_cell(0, 8, f"{idx}. {vuln.get('title', 'Unknown')} (Severity: {vuln.get('severity', 'N/A')})")
            pdf.multi_cell(0, 8, vuln.get('description', 'No description available'))
            pdf.ln(5)
            
    def _generate_report(self, metadata: Dict[str, Any], results: Dict[str, Any]) -> Path:
        """Generate complete PDF report"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = self.reports_dir / f"APT_Report_{timestamp}.pdf"
        
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        
        # Generate report sections
        self._generate_cover_page(pdf, metadata)
        self._generate_executive_summary(pdf, results.get('findings_stats', {}))
        self._generate_vulnerability_details(pdf, results.get('vulnerabilities', []))
        
        # Output final PDF
        pdf.output(report_path)
        return report_path
        
    def execute(self, target: ScanTarget) -> ScanResult:
        """
        Generate PDF report from scan results
        
        Args:
            target: ScanTarget containing report data and metadata
            
        Returns:
            ScanResult with report generation status
        """
        if not self.validate_target(target):
            logger.error("Invalid PDF generation target")
            return ScanResult(
                target=target,
                data={"error": "Invalid target"},
                status=ScanStatus.FAILED
            )
            
        try:
            metadata = target.metadata.get("report_metadata", {})
            results = target.metadata.get("results", {})
            
            logger.info("Generating PDF report from scan results")
            
            report_path = self._generate_report(metadata, results)
            
            return ScanResult(
                target=target,
                data={
                    "report_path": str(report_path),
                    "timestamp": datetime.now().isoformat(),
                    "size_bytes": report_path.stat().st_size,
                    "metadata": metadata
                },
                status=ScanStatus.COMPLETED
            )
            
        except Exception as e:
            logger.error(f"PDF report generation failed: {str(e)}", exc_info=True)
            return ScanResult(
                target=target,
                data={"error": str(e)},
                status=ScanStatus.FAILED
            )

# Module registration
def init_module():
    return PDFGenerator()

# Example usage:
# generator = PDFGenerator()
# target = ScanTarget(
#     metadata={
#         "report_metadata": {
#             "client": "Acme Corp",
#             "project": "Annual Security Audit"
#         },
#         "results": {
#             "vulnerabilities": [...],
#             "findings_stats": {...}
#         }
#     }
# )
# result = generator.execute(target)
# print(result.data["report_path"])